include:
  - project: univention/dist/docker-services
    file: kaniko.yml


build-portal-frontend-test-runner:
  stage: build
  extends: .kaniko
  variables:
    KANIKO_BUILD_CONTEXT: "frontend"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/portal-frontend-test-runner"
    KANIKO_ARGS: "--target=base"


build-portal-frontend-test-runner-ui:
  stage: build
  extends: .kaniko
  variables:
    KANIKO_BUILD_CONTEXT: "frontend"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/portal-frontend-test-runner-ui"
    KANIKO_ARGS: "--skip-unused-stages=true --target=test"
  # Frontend UI tests take a long time to run (~ 4-5 minutes). So only running them for very important events e.g. MR
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'


build-portal-frontend:
  stage: build
  extends: .kaniko
  variables:
    KANIKO_BUILD_CONTEXT: "frontend"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/portal-frontend"
    KANIKO_ARGS: "--skip-unused-stages=true"


build-portal-server:
  stage: build
  extends: .kaniko
  variables:
    DOCKERFILE_PATH: "docker/portal-server/Dockerfile"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/portal-server"


build-notification-api:
  stage: build
  extends: .kaniko
  variables:
    DOCKERFILE_PATH: "notifications-api/Dockerfile"
    KANIKO_BUILD_CONTEXT: "notifications-api"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/notification-api"


build-portal-server-test-runner:
  stage: build
  extends: .kaniko
  variables:
    DOCKERFILE_PATH: "docker/portal-server/Dockerfile"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/portal-server-test-runner"
    KANIKO_ARGS: "--target=test"


build-notification-api-test-runner:
  stage: build
  extends: .kaniko
  variables:
    DOCKERFILE_PATH: "notifications-api/Dockerfile"
    KANIKO_BUILD_CONTEXT: "notifications-api"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/notification-api-test-runner"
    KANIKO_ARGS: "--target=test"


test-portal-frontend-unit:
  stage: test
  needs:
    - job: build-portal-frontend-test-runner
  image: "$IMAGE_TAG"
  script:
    - yarn --cwd=/app test:unit


test-portal-frontend-ui:
  stage: test
  needs:
    - job: build-portal-frontend-test-runner-ui
  image: "$IMAGE_TAG"
  artifacts:
    when: always
    paths:
      - frontend/tests/e2e/videos/**/*.mp4
      - frontend/tests/e2e/screenshots/**/*.png
    expire_in: 1 day
  script:
    - yarn --cwd=/app test:e2e:headless --browser chrome
  after_script:
    # We generate the artifact in the Docker WORKDIR (/app), while Gitlab expects the artifacts in the runner's working
    # directory. https://docs.gitlab.com/ee/ci/pipelines/job_artifacts.html
    # So we create symbolic links to link these different locations.
    # TODO: cp will fail if the folder does not exist. Is there a better way?
    - cp -rs /app/tests/e2e/videos /builds/${CI_PROJECT_PATH}/frontend/tests/e2e/videos
    - cp -rs /app/tests/e2e/screenshots /builds/${CI_PROJECT_PATH}/frontend/tests/e2e/screenshots
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'


test-portal-server:
  stage: test
  needs:
    - job: build-portal-server-test-runner
  image: "$IMAGE_TAG"
  variables:
    PYTHONPATH: "./python:/usr/lib/python3/dist-packages"
  script:
    - pytest unittests


test-notification-api:
  stage: test
  needs:
    - job: build-notification-api-test-runner
  image: "$IMAGE_TAG"
  script:
    - cd notifications-api
    - pytest --cov=app --cov-report=term --cov-report=xml:coverage.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: notifications-api/coverage.xml


# Linting related checks and builds

# TODO: The pre-commit image is missing hadolint, that's why we are building our
# own one here until it is integrated upstream.
#
# Compare: https://git.knut.univention.de/univention/dist/docker-services

build-linter:
  stage: build
  extends: .kaniko
  variables:
    DOCKERFILE_PATH: docker/linter-pre-commit/Dockerfile
    KANIKO_BUILD_CONTEXT: docker/linter-pre-commit/
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/pre-commit"


pre-commit-linting:
  stage: test
  needs:
    - job: build-linter
  image: "$IMAGE_TAG"
  variables:
    PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
    PRE_COMMIT_HOME: "${CI_PROJECT_DIR}/.cache/pre-commit"
  cache:
    paths:
    - "${PIP_CACHE_DIR}"
    - "${PRE_COMMIT_HOME}"
  script:
    # Compose lint would fail without the referenced env files
    - for i in docker/.env.*.example; do cp "${i}" "${i/.example}"; done
    - pre-commit run --all-files


commit-message-linting:
  stage: test
  image: docker-registry.knut.univention.de/knut/pre-commit:latest
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  variables:
    PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
    PRE_COMMIT_HOME: "${CI_PROJECT_DIR}/.cache/pre-commit"
  cache:
    paths:
    - "${PIP_CACHE_DIR}"
    - "${PRE_COMMIT_HOME}"
  script:
    - |
      any_failure=0
      tmp_file="$(mktemp --tmpdir=.)"
      for x in $(git log --format="%H" "${CI_MERGE_REQUEST_DIFF_BASE_SHA}..${CI_COMMIT_SHA}")
      do
          echo "Checking commit message for $x"
          git log --format="%B" -n 1 "$x" > "$tmp_file"
          pre-commit run --hook-stage=commit-msg --commit-msg-filename="$tmp_file" \
              conventional-pre-commit || any_failure=1
      done
      rm "$tmp_file"
      exit "$any_failure"


lint-portal-frontend:
  stage: test
  needs:
    - job: build-portal-frontend-test-runner
  image: "$IMAGE_TAG"
  script:
    - yarn --cwd=/app lint
