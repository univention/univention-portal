---

variables:
  # git.knut.univention.de:443/univention/dependency_proxy/containers/debian:buster-slim
  #KANIKO_DOCKER_PROXY: "$CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX"
  KANIKO_DOCKER_PROXY: artifacts.knut.univention.de/dockerhub_proxy_cache/library
  SOUVAP_API_V4_URL: https://gitlab.souvap-univention.de/api/v4
  SOUVAP_HELM_ACCESS_USER: gitlab-ci-knut
  SOUVAP_HELM_PROJECT_ID: 75
  SOUVAP_REGISTRY_HOST: registry.souvap-univention.de
  SOUVAP_REGISTRY_PATH: souvap/tooling/images/univention-portal
  SOUVAP_REGISTRY_REPO: ${SOUVAP_REGISTRY_HOST}/${SOUVAP_REGISTRY_PATH}

stages:
  - build
  - test
  - package
  - publish

# This workflow rule prevents duplicate pipelines when pushing to branches that already have a merge request open
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH


include:
  - project: univention/dist/docker-services
    file: kaniko.yml

.kaniko-cert:
  before_script:
    - |
      echo "-----BEGIN CERTIFICATE-----
      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
      qPIOVrVRqJWp40WuzVK2
      -----END CERTIFICATE-----" >> /kaniko/ssl/certs/additional-ca-cert-bundle.crt


.push-image-souvap:
  variables:
    GIT_STRATEGY: none
  image: artifacts.knut.univention.de/dockerhub_proxy_cache/library/docker:20.10.12
  services:
  - name: docker-registry.knut.univention.de/ucs/docker:dind
    alias: docker
    command:
    - --insecure-registry=artifacts.knut.univention.de
    - --tls=false
  before_script:
    # derived from the .kaniko_pre to define the IMAGE_TAG and IMAGE_VERSION
    - |-
      if [ "${CI_COMMIT_REF_NAME:-}" = "${CI_DEFAULT_BRANCH:-}" ]; then
        VERSION="latest"
      elif [ -n "${CI_COMMIT_TAG:-}" ]; then
        NOSLASH=$(echo "${CI_COMMIT_TAG:-}" | tr -s / -)
        SANITIZED="${NOSLASH//[^a-zA-Z0-9\-\.]/}"
        VERSION="$SANITIZED"
      else
        NOSLASH=$(echo "${CI_COMMIT_REF_NAME:-}" | tr -s / -)
        SANITIZED="${NOSLASH//[^a-zA-Z0-9\-]/}"
        VERSION="branch-$SANITIZED"
      fi
      if [ ! -z "${IMAGE_TAG:-}" ]; then
        IMAGE_TAG="${CI_REGISTRY_IMAGE:-}:$VERSION"
      fi
    - echo "IMAGE_TAG=$IMAGE_TAG" | tee -a ./.env
    - echo "IMAGE_VERSION=$VERSION" | tee -a ./.env
  script:
    # Load variables from before_script
    - . ./.env
    - SOUVAP_IMAGE_TAG="${SOUVAP_REGISTRY_REPO}/${SOUVAP_IMAGE_NAME}:${IMAGE_VERSION}"
    - echo "logging in with CI_JOB_TOKEN"
    - echo "${CI_JOB_TOKEN}" | docker login --username "${CI_REGISTRY_USER}" --password-stdin "${CI_REGISTRY}"
    - 'echo "pulling image: ${IMAGE_TAG}"'
    - docker pull "${IMAGE_TAG}"
    - 'echo "tagging image: ${SOUVAP_IMAGE_TAG}"'
    - docker tag "${IMAGE_TAG}" "${SOUVAP_IMAGE_TAG}"
    # Use SouvAP-Repo-Access-Token to push image
    - echo "${SOUVAP_DOCKER_AUTH_CONFIG}" > "${HOME}/.docker/config.json"
    - docker push "${SOUVAP_IMAGE_TAG}"


build-portal-frontend-test-runner:
  stage: build
  extends:
    - .kaniko-cert
    - .kaniko
  variables:
    KANIKO_BUILD_CONTEXT: "frontend"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/portal-frontend-test-runner"
    # We cache the Docker layers in the registry to reduce build time of future runs of this job
    KANIKO_ARGS: "--target=base --cache=true --cache-repo=$CI_REGISTRY_IMAGE-cache"
  # Runs in both branch pipelines and merge request pipelines
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH


build-portal-frontend-test-runner-ui:
  stage: build
  extends:
    - .kaniko-cert
    - .kaniko
  variables:
    KANIKO_BUILD_CONTEXT: "frontend"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/portal-frontend-test-runner-ui"
    KANIKO_ARGS: "--skip-unused-stages=true --target=test --cache=true --cache-repo=$CI_REGISTRY_IMAGE-cache"
  # Frontend UI tests take a long time to run (~ 4-5 minutes). So only running them for very important events e.g. MR
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"


build-portal-frontend:
  stage: build
  extends:
    - .kaniko-cert
    - .kaniko
  variables:
    KANIKO_BUILD_CONTEXT: "frontend"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/portal-frontend"
    KANIKO_ARGS: "--skip-unused-stages=true --cache=true --cache-repo=$CI_REGISTRY_IMAGE-cache"
  after_script:
    - docker images --all
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH


push-image-souvap-portal-frontend-job:
  stage: build
  needs:
    - job: build-portal-frontend
  extends: .push-image-souvap
  variables:
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/portal-frontend"
    SOUVAP_IMAGE_NAME: "portal-frontend"


build-portal-server-test-runner:
  stage: build
  extends:
    - .kaniko-cert
    - .kaniko
  variables:
    DOCKERFILE_PATH: "docker/portal-server/Dockerfile"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/portal-server-test-runner"
    KANIKO_ARGS: "--target=test"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH


build-portal-server:
  stage: build
  extends:
    - .kaniko-cert
    - .kaniko
  variables:
    DOCKERFILE_PATH: "docker/portal-server/Dockerfile"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/portal-server"
  after_script:
    - docker images --all
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH


push-image-souvap-portal-server-job:
  stage: build
  needs:
    - job: build-portal-server
  extends: .push-image-souvap
  variables:
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/portal-server"
    SOUVAP_IMAGE_NAME: "portal-server"


build-notifications-api-test-runner:
  stage: build
  extends:
    - .kaniko-cert
    - .kaniko
  variables:
    DOCKERFILE_PATH: "notifications-api/Dockerfile"
    KANIKO_BUILD_CONTEXT: "notifications-api"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/notifications-api-test-runner"
    KANIKO_ARGS: "--target=test"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH


build-notifications-api:
  stage: build
  extends:
    - .kaniko-cert
    - .kaniko
  variables:
    DOCKERFILE_PATH: "notifications-api/Dockerfile"
    KANIKO_BUILD_CONTEXT: "notifications-api"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/notifications-api"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH


push-image-souvap-notifications-api-job:
  stage: build
  needs:
    - job: build-notifications-api
  extends: .push-image-souvap
  variables:
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/notifications-api"
    SOUVAP_IMAGE_NAME: "notifications-api"


package-helm-charts:
  stage: "package"
  only:
    - "develop"
    - "main"
  needs: []
  artifacts:
    paths:
      - "packages/*.tgz"
  image:
    name: "${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/alpine/helm:3.10.2"
    entrypoint: [""]
  script:
    - "if [ -z \"${RELEASE_VERSION}\" ]; then exit 0; fi"
    - "helm repo add bitnami https://charts.bitnami.com/bitnami"
    - |
      for helm_path in `find ./helm -mindepth 1 -maxdepth 1 -type d`; do
        helm_dir=$(basename "${helm_path}")
        echo "Packaging helm-chart ${helm_dir}"
        helm package --version "${RELEASE_VERSION}" --destination "./packages" --dependency-update "helm/${helm_dir}"
      done
  variables:
    # TODO: Extract the release information from Git.
    # Compare: https://gitlab.souvap-univention.de/souvap/tooling/charts/openproject-helm-chart/-/blob/souvap/.gitlab-ci.yml#L25
    RELEASE_VERSION: "0.0.0"


publish-helm-charts:
  stage: "publish"
  only:
    - "develop"
    - "main"
  dependencies:
    - "package-helm-charts"
  needs:
    - "package-helm-charts"
  image: "${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/curlimages/curl:latest"
  script:
    - "if [ -z \"${RELEASE_VERSION}\" ]; then exit 0; fi"
    - |
      for _filename in `find packages -type f`; do
        curl \
        --request "POST" \
        --user "${SOUVAP_HELM_ACCESS_USER}:${SOUVAP_HELM_ACCESS_TOKEN}" \
        --form "chart=@$_filename" \
        "${SOUVAP_API_V4_URL}/projects/${SOUVAP_HELM_PROJECT_ID}/packages/helm/api/stable/charts";
      done
  variables:
    GIT_STRATEGY: "none"
    # TODO: Extract the release information from Git.
    # Compare: https://gitlab.souvap-univention.de/souvap/tooling/charts/openproject-helm-chart/-/blob/souvap/.gitlab-ci.yml#L25
    RELEASE_VERSION: "0.0.0"


build-debian-package-builder:
  stage: build
  extends: .kaniko
  variables:
    KANIKO_BUILD_CONTEXT: "docker/deb-build"
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/deb-builder"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH


build-debian-package:
  stage: build
  needs:
    - job: build-debian-package-builder
  image: "$IMAGE_TAG"
  before_script:
    - apt-get -qq update
    - apt-get -q --assume-yes build-dep .
  script:
    - source ~/.nvm/nvm.sh
    - dpkg-buildpackage --no-sign
    - rm -fr public
    - mkdir public
    - mv -v ../*.{deb,dsc,tar.gz,buildinfo,changes} public/
  artifacts:
    paths:
      - public/
    expire_in: 1 week


test-portal-frontend-unit:
  stage: test
  needs:
    - job: build-portal-frontend-test-runner
  image: "$IMAGE_TAG"
  script:
    - yarn --cwd=/app test:unit
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH


test-portal-frontend-ui:
  stage: test
  needs:
    - job: build-portal-frontend-test-runner-ui
  image: "$IMAGE_TAG"
  artifacts:
    when: always
    paths:
      - frontend/tests/e2e/videos/**/*.mp4
      - frontend/tests/e2e/screenshots/**/*.png
    expire_in: 1 day
  script:
    - yarn --cwd=/app test:e2e:headless --browser chrome
  after_script:
    # We generate the artifact in the Docker WORKDIR (/app), while Gitlab expects the artifacts in the runner's working
    # directory. https://docs.gitlab.com/ee/ci/pipelines/job_artifacts.html
    # So we copy the artifacts from our build directory to where Gitlab expects.
    # TODO: cp will fail if the folder does not exist. Is there a better way?
    - cp -r /app/tests/e2e/videos /builds/${CI_PROJECT_PATH}/frontend/tests/e2e/videos
    - cp -r /app/tests/e2e/screenshots /builds/${CI_PROJECT_PATH}/frontend/tests/e2e/screenshots
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"


test-portal-server:
  stage: test
  needs:
    - job: build-portal-server-test-runner
  image: "$IMAGE_TAG"
  variables:
    PYTHONPATH: "./python:/usr/lib/python3/dist-packages"
  script:
    - pytest --cov=python/univention/portal --cov-report=term --cov-report=xml:coverage.xml unittests
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH


test-notifications-api:
  stage: test
  needs:
    - job: build-notifications-api-test-runner
  image: "$IMAGE_TAG"
  script:
    - cd notifications-api
    - pytest --cov=app --cov-report=term --cov-report=xml:coverage.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: notifications-api/coverage.xml
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH


# Linting related checks and builds

# TODO: The pre-commit image is missing hadolint, that's why we are building our
# own one here until it is integrated upstream.
#
# Compare: https://git.knut.univention.de/univention/dist/docker-services

build-linter:
  stage: build
  extends:
    - .kaniko-cert
    - .kaniko
  variables:
    KANIKO_DOCKER_PROXY: artifacts.knut.univention.de/dockerhub_proxy_cache
    DOCKERFILE_PATH: docker/linter-pre-commit/Dockerfile
    KANIKO_BUILD_CONTEXT: docker/linter-pre-commit/
    CI_REGISTRY_IMAGE: "$CI_REGISTRY_IMAGE/pre-commit"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH


pre-commit-linting:
  stage: test
  needs:
    - job: build-linter
  image: "$IMAGE_TAG"
  variables:
    PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
    PRE_COMMIT_HOME: "${CI_PROJECT_DIR}/.cache/pre-commit"
  cache:
    paths:
    - "${PIP_CACHE_DIR}"
    - "${PRE_COMMIT_HOME}"
  script:
    # Compose lint would fail without the referenced env files
    - cp docker/.env.example docker/.env
    - pre-commit run --all-files
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH


commit-message-linting:
  stage: test
  needs: []
  image: docker-registry.knut.univention.de/knut/pre-commit:latest
  variables:
    PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
    PRE_COMMIT_HOME: "${CI_PROJECT_DIR}/.cache/pre-commit"
  cache:
    paths:
    - "${PIP_CACHE_DIR}"
    - "${PRE_COMMIT_HOME}"
  script:
    - |
      any_failure=0
      tmp_file="$(mktemp --tmpdir=.)"
      for x in $(git log --format="%H" "${CI_MERGE_REQUEST_DIFF_BASE_SHA}..${CI_COMMIT_SHA}")
      do
          echo "Checking commit message for $x"
          git log --format="%B" -n 1 "$x" > "$tmp_file"
          pre-commit run --hook-stage=commit-msg --commit-msg-filename="$tmp_file" \
              conventional-pre-commit || any_failure=1
      done
      rm "$tmp_file"
      exit "$any_failure"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"


lint-portal-frontend:
  stage: test
  needs:
    - job: build-portal-frontend-test-runner
  image: "$IMAGE_TAG"
  script:
    - yarn --cwd=/app lint
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH

...
