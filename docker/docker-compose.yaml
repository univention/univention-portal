version: "3.9"

services:
  portal-frontend:
    build:
      context: ../frontend
    container_name: univention-portal-frontend
    ports:
      - "8080:80"
  portal-server:
    platform: "linux/amd64"
    build:
      context: ../
      dockerfile: docker/portal-server/Dockerfile
    container_name: univention-portal-server
    env_file: .env
    ports:
      - "8095:80"
    # On non-Linux machines we see issues with using the IP address
    # "172.17.0.1" to reach the host system. Instead the name
    # "host.docker.internal" has to be used. A workaround is provided in
    # "docker-compose.override.yaml.example". You can use this by renaming
    # the file to "docker-compose.override.yaml".
    #
    # See https://docs.docker.com/compose/reference/#specifying-multiple-compose-files
    environment:
      PORTAL_SERVER_ADMIN_GROUP: "cn=Domain Admins,cn=groups,dc=univention,dc=test"
      PORTAL_SERVER_AUTH_MODE: "ucs"
      PORTAL_SERVER_EDITABLE: "true"
      PORTAL_SERVER_PORT: "80"
      PORTAL_SERVER_UCS_INTERNAL_URL: "http://172.17.0.1:8000/univention/internal"
      PORTAL_SERVER_UMC_GET_URL: "http://172.17.0.1:8000/univention/get"
      PORTAL_SERVER_UMC_SESSION_URL: "http://172.17.0.1:8000/univention/get/session-info"
    # volumes:
    # You can bind mount stub files into your portal container if you need
    # to run it alone. In this case make sure that you are not using the
    # HTTP based cache implementation. See portals.json and the command
    # "python3 univention-portal add-default" to generate it.
    #
    # - type: bind
    #   source: ./portal-server/stub_groups.json
    #   target: /var/cache/univention-portal/groups.json
    # - type: bind
    #   source: ./portal-server/stub_portal.json
    #   target: /var/cache/univention-portal/portal.json
    # - type: bind
    #   source: ./portal-server/machine.secret
    #   target: /etc/machine.secret
  notifications-api:
    build:
      context: ../notifications-api
    container_name: notifications-api
    restart: on-failure
    depends_on:
      - db
    environment:
      DATABASE_URL: "postgresql://dev:devpassword@db/dev"
      APPLY_DATABASE_MIGRATIONS: true
    ports:
      - 8096:8080
  reverse-proxy:
    build:
      context: ./reverse-proxy
    container_name: univention-portal-dev-reverse-proxy
    env_file: .env
    ports:
      - "${PROXY_PORT}:80"
  db:
    image: postgres:12.13-alpine
    environment:
      POSTGRES_PASSWORD: "devpassword"
      POSTGRES_USER: "dev"
    volumes:
      - type: volume
        source: postgresql-data
        target: /var/lib/postgresql/data
    ports:
      - 5432:5432

  keycloak:
    container_name: keycloak
    # image: quay.io/keycloak/keycloak:19.0.0
    build: ./keycloak
    command: start-dev --http-enabled=true --import-realm
    volumes:
      - ./keycloak:/opt/keycloak/data/import
    ports:
      - 8097:8080
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=univention
      - PROXY_ADDRESS_FORWARDING=true
      - KC_PROXY=edge
      - KEYCLOAK_LOGLEVEL=ALL
      - ROOT_LOGLEVEL=ALL

  test:
    profiles:
      - test
    platform: "linux/amd64"
    build:
      context: ../
      dockerfile: docker/portal-server/Dockerfile
      target: test
    container_name: univention-portal-server-test
    environment:
      # TODO: "dist-packages" part required due to custom interpreter
      PYTHONPATH: "./python:/usr/lib/python3/dist-packages"
    volumes:
      - type: bind
        source: ../python
        target: /staging/python
      - type: bind
        source: ../unittests
        target: /staging/unittests

  deb-builder:
    profiles:
      - test
    platform: "linux/amd64"
    build:
      context: ./deb-build
    container_name: univention-portal-deb-builder
    volumes:
      - type: bind
        source: ../
        target: /src

  pre-commit:
    profiles:
      - test
    platform: "linux/amd64"
    build:
      context: linter-pre-commit
    container_name: univention-portal-pre-commit
    environment:
      PIP_CACHE_DIR: /cache/pip
      PRE_COMMIT_HOME: /cache/pre-commit
    working_dir: /work
    volumes:
      - type: bind
        source: ..
        target: /work
      - type: volume
        # pre-commit installs dependencies, having them cached speeds things up
        # a lot.
        source: pre-commit-cache
        target: /cache

volumes:
  pre-commit-cache:
  var-local-notifications-api:
  postgresql-data:
