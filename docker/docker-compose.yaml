version: "3.9"

name: "dev-local"

services:
  # The frontend of the Portal. The context directory contains more details.
  portal-frontend:
    build:
      context: ../frontend
    ports:
      - "8080:80"

  # The server of the Potral. See "./portal-server/" regarding further details.
  portal-server:
    platform: "linux/amd64"
    build:
      context: ../
      dockerfile: docker/portal-server/Dockerfile
    env_file: .env
    ports:
      - "8095:80"
    # On non-Linux machines we see issues with using the IP address
    # "172.17.0.1" to reach the host system. Instead the name
    # "host.docker.internal" has to be used. A workaround is provided in
    # "docker-compose.override.yaml.example". You can use this by renaming
    # the file to "docker-compose.override.yaml".
    #
    # See https://docs.docker.com/compose/reference/#specifying-multiple-compose-files
    environment:
      PORTAL_SERVER_ADMIN_GROUP: "cn=Domain Admins,cn=groups,dc=univention,dc=test"
      PORTAL_SERVER_AUTH_MODE: "ucs"
      PORTAL_SERVER_EDITABLE: "true"
      PORTAL_SERVER_PORT: "80"
      PORTAL_SERVER_UCS_INTERNAL_URL: "http://172.17.0.1:8000/univention/internal"
      PORTAL_SERVER_UMC_GET_URL: "http://172.17.0.1:8000/univention/internal/umc/get"
      PORTAL_SERVER_UMC_SESSION_URL: "http://172.17.0.1:8000/univention/internal/umc/get/session-info"
      # This must be the same secret as the `ucs_auth_secret` variable in ansible/hosts.yaml
      PORTAL_SERVER_AUTH_SECRET: "univention"
    # volumes:
    # You can bind mount stub files into your portal container if you need
    # to run it alone. In this case make sure that you are not using the
    # HTTP based cache implementation. See portals.json and the command
    # "python3 univention-portal add-default" to generate it.
    #
    # - type: bind
    #   source: ./portal-server/stub_groups.json
    #   target: /var/cache/univention-portal/groups.json
    # - type: bind
    #   source: ./portal-server/stub_portal.json
    #   target: /var/cache/univention-portal/portal.json
    # - type: bind
    #   source: ./portal-server/machine.secret
    #   target: /etc/machine.secret

  portal-listener:
    platform: linux/amd64
    build:
      context: ../
      dockerfile: docker/portal-listener/Dockerfile
    env_file: .env.listener
    environment:
      PORTAL_SERVER_ADMIN_GROUP: "cn=Domain Admins,cn=groups,dc=univention,dc=test"
      PORTAL_SERVER_AUTH_MODE: "ucs"
      PORTAL_SERVER_EDITABLE: "true"
      PORTAL_SERVER_PORT: "80"
      PORTAL_SERVER_UCS_INTERNAL_URL: "http://172.17.0.1:8000/univention/internal"
      PORTAL_SERVER_UMC_GET_URL: "http://172.17.0.1:8000/univention/internal/umc/get"
      PORTAL_SERVER_UMC_SESSION_URL: "http://172.17.0.1:8000/univention/internal/umc/get/session-info"
      # This must be the same secret as the `ucs_auth_secret` variable in ansible/hosts.yaml
      PORTAL_SERVER_AUTH_SECRET: "univention"
    secrets:
      - ca_cert
      - cert_pem
      - ldap_secret
      - machine_secret
      # univention-group-membership-cache does not allow to configure a different path
      - source: machine_secret
        target: /etc/machine.secret
    volumes:
      - listener-data:/var/lib/univention-directory-listener/:rw

  # The notifications API of the Portal. The context directory contains more
  # details.
  notifications-api:
    build:
      context: ../notifications-api
    restart: on-failure
    depends_on:
      - db
    environment:
      DATABASE_URL: "postgresql://dev:devpassword@db/dev"
      APPLY_DATABASE_MIGRATIONS: true
      ROOT_PATH: "/univention/portal/notifications-api"
    ports:
      - 8096:8080

  # The reverse proxy to support the local setup. The context directory contains
  # more details.
  reverse-proxy:
    build:
      context: ./reverse-proxy
    env_file: .env
    ports:
      - "${PROXY_PORT}:80"

  # The database is needed by the notifications API.
  db:
    image: postgres:12.13-alpine
    environment:
      POSTGRES_PASSWORD: "devpassword"
      POSTGRES_USER: "dev"
    volumes:
      - type: volume
        source: postgresql-data
        target: /var/lib/postgresql/data
    ports:
      - 5432:5432

  # A keycloak instance to allow simulating a login process based on keycloak
  # for the Portal. The context directory contains more details.
  keycloak:
    build:
      context: ../
      dockerfile: docker/keycloak/Dockerfile
    ports:
      - 8097:8080
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "univention"
      PROXY_ADDRESS_FORWARDING: "true"
      KC_PROXY: "edge"
      KEYCLOAK_LOGLEVEL: "ALL"
      ROOT_LOGLEVEL: "ALL"
      # override the following values in docker-compose.override.yaml
      LDAP_BASE: "dc=univention,dc=intranet"
      LDAP_SECRET: "YOUR CONTENT OF /etc/idp-ldap-user.secret"
      LDAP_SERVER: "ldap://UCS_IP:7389"

  # The test runner of the Portal Server.
  test:
    profiles:
      - test
    platform: "linux/amd64"
    build:
      context: ../
      dockerfile: docker/portal-server/Dockerfile
      target: test
    container_name: univention-portal-server-test
    environment:
      # TODO: "dist-packages" part required due to custom interpreter
      PYTHONPATH: "./python:/usr/lib/python3/dist-packages"
    volumes:
      - type: bind
        source: ../python
        target: /staging/python
      - type: bind
        source: ../unittests
        target: /staging/unittests

  # Environment to build the Debian package. The context directory contains more
  # details.
  deb-builder:
    profiles:
      - test
    platform: "linux/amd64"
    build:
      context: ./deb-build
    volumes:
      - type: bind
        source: ../
        target: /src

  # Environment of the pre-commit linter.
  pre-commit:
    profiles:
      - test
    image: gitregistry.knut.univention.de/univention/customers/dataport/upx/container-pre-commit/upx-pre-commit:latest
    volumes:
      - type: bind
        source: ..
        target: /code
      - type: volume
        # pre-commit installs dependencies, having them cached speeds things up
        # a lot.
        source: pre-commit-cache
        target: /cache

  # Environment which allows to run the tool "helm-docs". See the directory
  # "../helm/" for more details.
  helm-docs:
    profiles:
      - test
    image: "jnorwood/helm-docs:v1.11.0"
    command: "-c helm"
    volumes:
      - type: bind
        source: ..
        target: /helm-docs


secrets:
  ca_cert:
    file: ssl/certs/CAcert.pem
  cert_pem:
    file: ssl/certs/cert.pem
  ldap_secret:
    file: secret/ldap.secret
  machine_secret:
    file: secret/machine.secret
volumes:
  listener-data:
  pre-commit-cache:
  postgresql-data:
