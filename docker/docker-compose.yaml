version: "3.9"

services:
  portal-frontend:
    build:
      context: ../frontend
    container_name: univention-portal-frontend
    ports:
      - "8080:80"
  portal-server:
    platform: "linux/amd64"
    build:
      context: ../
      dockerfile: docker/portal-server/Dockerfile
    container_name: univention-portal-server
    env_file: .env
    ports:
      - "8095:80"
    volumes:
      # On non-Linux machines we see issues with using the IP address
      # "172.17.0.1" to reach the host system. Instead the name
      # "host.docker.internal" has to be used. A workaround is provided in
      # "stub_config_non_linux.json". You can use this by adding an override
      # file as "docker-compose.override.yaml" into this directory.
      #
      # See https://docs.docker.com/compose/reference/#specifying-multiple-compose-files
      - type: bind
        source: ./portal-server/stub_config.json
        target: /usr/lib/univention-portal/config/config.json

      # You can bind mount stub files into your portal container if you need
      # to run it alone. In this case make sure that you are not using the
      # HTTP based cache implementation. See portals.json and the command
      # "python3 univention-portal add-default" to generate it.
      #
      # - type: bind
      #   source: ./portal-server/stub_groups.json
      #   target: /var/cache/univention-portal/groups.json
      # - type: bind
      #   source: ./portal-server/stub_portal.json
      #   target: /var/cache/univention-portal/portal.json
      # - type: bind
      #   source: ./portal-server/machine.secret
      #   target: /etc/machine.secret
  notifications-api:
    build:
      context: ../notifications-api
    container_name: notifications-api
    depends_on:
      - db
    environment:
      DATABASE_URL: "postgresql://dev:devpassword@db/dev"
      APPLY_DATABASE_MIGRATIONS: true
    volumes:
      - type: volume
        source: var-local-notifications-api
        target: /var/local/notifications-api
    ports:
      - 8096:80
  reverse-proxy:
    build:
      context: ./reverse-proxy
    container_name: univention-portal-dev-reverse-proxy
    env_file: .env
    ports:
      - "${PROXY_PORT}:80"
  db:
    image: postgres:12.13-alpine
    environment:
      POSTGRES_PASSWORD: "devpassword"
      POSTGRES_USER: "dev"
    volumes:
      - type: volume
        source: postgresql-data
        target: /var/lib/postgresql/data
    ports:
      - 5432:5432

  test:
    profiles:
      - test
    platform: "linux/amd64"
    build:
      context: ../
      dockerfile: docker/portal-server/Dockerfile
      target: test
    container_name: univention-portal-server-test
    environment:
      # TODO: "dist-packages" part required due to custom interpreter
      PYTHONPATH: "./python:/usr/lib/python3/dist-packages"
    volumes:
      - type: bind
        source: ../python
        target: /staging/python
      - type: bind
        source: ../unittests
        target: /staging/unittests

  pre-commit:
    profiles:
      - test
    platform: "linux/amd64"
    build:
      context: linter-pre-commit
    container_name: univention-portal-pre-commit
    environment:
      PIP_CACHE_DIR: /cache/pip
      PRE_COMMIT_HOME: /cache/pre-commit
    working_dir: /work
    volumes:
      - type: bind
        source: ..
        target: /work
      - type: volume
        # pre-commit installs dependencies, having them cached speeds things up
        # a lot.
        source: pre-commit-cache
        target: /cache

volumes:
  pre-commit-cache:
  var-local-notifications-api:
  postgresql-data:
