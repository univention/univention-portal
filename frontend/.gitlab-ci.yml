---

# SPDX-FileCopyrightText: 2023-2024 Univention GmbH
# SPDX-License-Identifier: AGPL-3.0-only

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "parent_pipeline"'

include:
  - project: "univention/customers/dataport/upx/common-ci"
    ref: "v1.24.4"
    file:
      - "defaults/stages.yaml"
      - "templates/souvap.yaml"
      - "templates/kaniko.yaml"
      - "jobs/container-build-souvap.yaml"

build-debian-package-builder:
  stage: "prepare"
  extends: ".kaniko"
  needs: []
  variables:
    IMAGE_NAME: "deb-builder"

i18n:
  stage: "prepare"
  needs:
    - job: "build-debian-package-builder"
  image: "$BUILD_IMAGE_TAG"
  script:
    - |
      make l10n-build
  artifacts:
    paths:
      - "frontend/public/i18n"
    expire_in: "1 week"

build-frontend-test-runner:
  stage: "build"
  extends: ".kaniko"
  variables:
    IMAGE_NAME: "portal-frontend-test-runner"
    KANIKO_ARGS: "--target=base"
    KANIKO_BUILD_CONTEXT: "$CI_PROJECT_DIR/frontend"

build-frontend-test-runner-ui:
  stage: "build"
  extends: ".kaniko"
  variables:
    IMAGE_NAME: "portal-frontend-test-runner-ui"
    KANIKO_ARGS: "--target=base"
    KANIKO_BUILD_CONTEXT: "$CI_PROJECT_DIR/frontend"
    DOCKERFILE_PATH: "Dockerfile.test"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

.build-matrix: &build-matrix
  - IMAGE_NAME: "portal-frontend"

.publish-matrix: &publish-matrix
  - IMAGE_NAME: "portal-frontend"

container-build:
  parallel:
    matrix: *build-matrix
  variables:
    KANIKO_BUILD_CONTEXT: "$CI_PROJECT_DIR/frontend"

container-generate-sbom:
  parallel:
    matrix: *build-matrix

container-sign:
  parallel:
    matrix: *build-matrix

container-security-scan:
  parallel:
    matrix: *build-matrix

lint-portal-frontend:
  stage: "test"
  image: "$CI_REGISTRY_IMAGE/portal-frontend-test-runner:${RELEASE_VERSION}"
  script:
    - |
      yarn --cwd=/app lint

test-portal-frontend-unit:
  stage: "test"
  image: "$CI_REGISTRY_IMAGE/portal-frontend-test-runner:${RELEASE_VERSION}"
  script:
    - |
      yarn --cwd=/app test:unit

test-portal-frontend-ui:
  stage: "test"
  image: "$CI_REGISTRY_IMAGE/portal-frontend-test-runner-ui:${RELEASE_VERSION}"
  artifacts:
    when: "always"
    paths:
      - "frontend/tests/e2e/videos/**/*.mp4"
      - "frontend/tests/e2e/screenshots/**/*.png"
    expire_in: "1 day"
  script:
    - |
      yarn --cwd=/app test:e2e:headless --browser chrome
  after_script:
    - |
      # We generate the artifact in the Docker WORKDIR (/app), while Gitlab expects the artifacts in the runner's working
      # directory. https://docs.gitlab.com/ee/ci/pipelines/job_artifacts.html
      # So we copy the artifacts from our build directory to where Gitlab expects.
      # TODO: cp will fail if the folder does not exist. Is there a better way?
      cp -r /app/tests/e2e/videos /builds/${CI_PROJECT_PATH}/frontend/tests/e2e/videos
      cp -r /app/tests/e2e/screenshots /builds/${CI_PROJECT_PATH}/frontend/tests/e2e/screenshots
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

push-image-souvap:
  parallel:
    matrix: *publish-matrix

container-sign-souvap:
  parallel:
    matrix: *publish-matrix

...
