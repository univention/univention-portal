/* tslint:disable */
/* eslint-disable */
/**
 * Notifications
 *
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     *
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 *
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 *
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    'sourceUid': string;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    'targetUid': string;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    'details': string;
    /**
     *
     * @type {NotificationSeverity}
     * @memberof Notification
     */
    'severity': NotificationSeverity;
    /**
     *
     * @type {boolean}
     * @memberof Notification
     */
    'sticky'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Notification
     */
    'needsConfirmation'?: boolean;
    /**
     *
     * @type {NotificationType}
     * @memberof Notification
     */
    'notificationType': NotificationType;
    /**
     *
     * @type {object}
     * @memberof Notification
     */
    'data'?: object;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    'receiveTime': string;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    'readTime'?: string;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    'sseSendTime'?: string;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    'confirmationTime'?: string;
    /**
     *
     * @type {string}
     * @memberof Notification
     */
    'expireTime'?: string;
}
/**
 *
 * @export
 * @interface NotificationCreate
 */
export interface NotificationCreate {
    /**
     *
     * @type {string}
     * @memberof NotificationCreate
     */
    'sourceUid': string;
    /**
     *
     * @type {string}
     * @memberof NotificationCreate
     */
    'targetUid': string;
    /**
     *
     * @type {string}
     * @memberof NotificationCreate
     */
    'title': string;
    /**
     *
     * @type {string}
     * @memberof NotificationCreate
     */
    'details': string;
    /**
     *
     * @type {NotificationSeverity}
     * @memberof NotificationCreate
     */
    'severity': NotificationSeverity;
    /**
     *
     * @type {boolean}
     * @memberof NotificationCreate
     */
    'sticky'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof NotificationCreate
     */
    'needsConfirmation'?: boolean;
    /**
     *
     * @type {NotificationType}
     * @memberof NotificationCreate
     */
    'notificationType': NotificationType;
    /**
     *
     * @type {object}
     * @memberof NotificationCreate
     */
    'data'?: object;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const NotificationSeverity = {
    Info: 'info',
    Success: 'success',
    Warning: 'warning',
    Error: 'error'
} as const;

export type NotificationSeverity = typeof NotificationSeverity[keyof typeof NotificationSeverity];


/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const NotificationType = {
    Event: 'event',
    Announcement: 'announcement',
    Alert: 'alert'
} as const;

export type NotificationType = typeof NotificationType[keyof typeof NotificationType];


/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     *
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Create Notification
         * @param {NotificationCreate} notificationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotificationV1NotificationsPost: async (notificationCreate: NotificationCreate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationCreate' is not null or undefined
            assertParamExists('createNotificationV1NotificationsPost', 'notificationCreate', notificationCreate)
            const localVarPath = `/v1/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get Latest Notifications For User
         * @param {string} [title]
         * @param {string} [limit]
         * @param {string} [type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestNotificationsForUserV1NotificationsLatestGet: async (title?: string, limit?: string, type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/notifications/latest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Mark Notification Read
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markNotificationReadV1NotificationsIdConfirmPatch: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('markNotificationReadV1NotificationsIdConfirmPatch', 'id', id)
            const localVarPath = `/v1/notifications/{id}/confirm`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Mark Notification Read
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markNotificationReadV1NotificationsIdReadPatch: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('markNotificationReadV1NotificationsIdReadPatch', 'id', id)
            const localVarPath = `/v1/notifications/{id}/read`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Say Hello
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sayHelloV1Get: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Stream Notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamNotificationsV1NotificationsStreamGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/notifications/stream`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Create Notification
         * @param {NotificationCreate} notificationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNotificationV1NotificationsPost(notificationCreate: NotificationCreate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNotificationV1NotificationsPost(notificationCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get Latest Notifications For User
         * @param {string} [title]
         * @param {string} [limit]
         * @param {string} [type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestNotificationsForUserV1NotificationsLatestGet(title?: string, limit?: string, type?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLatestNotificationsForUserV1NotificationsLatestGet(title, limit, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Mark Notification Read
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markNotificationReadV1NotificationsIdConfirmPatch(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markNotificationReadV1NotificationsIdConfirmPatch(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Mark Notification Read
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markNotificationReadV1NotificationsIdReadPatch(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markNotificationReadV1NotificationsIdReadPatch(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Say Hello
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sayHelloV1Get(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sayHelloV1Get(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Stream Notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async streamNotificationsV1NotificationsStreamGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.streamNotificationsV1NotificationsStreamGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         *
         * @summary Create Notification
         * @param {NotificationCreate} notificationCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotificationV1NotificationsPost(notificationCreate: NotificationCreate, options?: any): AxiosPromise<Notification> {
            return localVarFp.createNotificationV1NotificationsPost(notificationCreate, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get Latest Notifications For User
         * @param {string} [title]
         * @param {string} [limit]
         * @param {string} [type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestNotificationsForUserV1NotificationsLatestGet(title?: string, limit?: string, type?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getLatestNotificationsForUserV1NotificationsLatestGet(title, limit, type, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Mark Notification Read
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markNotificationReadV1NotificationsIdConfirmPatch(id: string, options?: any): AxiosPromise<any> {
            return localVarFp.markNotificationReadV1NotificationsIdConfirmPatch(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Mark Notification Read
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markNotificationReadV1NotificationsIdReadPatch(id: string, options?: any): AxiosPromise<any> {
            return localVarFp.markNotificationReadV1NotificationsIdReadPatch(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Say Hello
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sayHelloV1Get(options?: any): AxiosPromise<any> {
            return localVarFp.sayHelloV1Get(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Stream Notifications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        streamNotificationsV1NotificationsStreamGet(options?: any): AxiosPromise<any> {
            return localVarFp.streamNotificationsV1NotificationsStreamGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     *
     * @summary Create Notification
     * @param {NotificationCreate} notificationCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createNotificationV1NotificationsPost(notificationCreate: NotificationCreate, options?: AxiosRequestConfig): AxiosPromise<Notification>;

    /**
     *
     * @summary Get Latest Notifications For User
     * @param {string} [title]
     * @param {string} [limit]
     * @param {string} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getLatestNotificationsForUserV1NotificationsLatestGet(title?: string, limit?: string, type?: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     *
     * @summary Mark Notification Read
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    markNotificationReadV1NotificationsIdConfirmPatch(id: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     *
     * @summary Mark Notification Read
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    markNotificationReadV1NotificationsIdReadPatch(id: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     *
     * @summary Say Hello
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    sayHelloV1Get(options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     *
     * @summary Stream Notifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    streamNotificationsV1NotificationsStreamGet(options?: AxiosRequestConfig): AxiosPromise<any>;

}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     *
     * @summary Create Notification
     * @param {NotificationCreate} notificationCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createNotificationV1NotificationsPost(notificationCreate: NotificationCreate, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createNotificationV1NotificationsPost(notificationCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get Latest Notifications For User
     * @param {string} [title]
     * @param {string} [limit]
     * @param {string} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLatestNotificationsForUserV1NotificationsLatestGet(title?: string, limit?: string, type?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getLatestNotificationsForUserV1NotificationsLatestGet(title, limit, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Mark Notification Read
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public markNotificationReadV1NotificationsIdConfirmPatch(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).markNotificationReadV1NotificationsIdConfirmPatch(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Mark Notification Read
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public markNotificationReadV1NotificationsIdReadPatch(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).markNotificationReadV1NotificationsIdReadPatch(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Say Hello
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sayHelloV1Get(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sayHelloV1Get(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Stream Notifications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public streamNotificationsV1NotificationsStreamGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).streamNotificationsV1NotificationsStreamGet(options).then((request) => request(this.axios, this.basePath));
    }
}


