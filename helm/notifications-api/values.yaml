---
# Default values for univention-notifications-api.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## Global values
affinity: {}
environment: {}
fullnameOverride: ""
nameOverride: ""
nodeSelector: {}
podAnnotations: {}
podSecurityContext: {}
replicaCount: 1
securityContext: {}
tolerations: []


## Application-specific
notificationsapi:
  apply_database_migrations: "True"
  dev_mode: "False"
  environment: "production"
  log_level: "WARNING"
  api_prefix: "/univention/portal/notifications-api/"


## Kubernetes ingress
ingress:
  enabled: false
  ingressClassName: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
  ## Define Hostname
  # host: "portal.example.com"
  paths:
    - pathType: "Prefix"
      path: "/univention/portal/notifications-api/(.*)"
  tls:
    enabled: true
    secretName: ""


## Istio support
istio:
  enabled: true
  ## Define Hostname
  # host: "portal.example.com"
  virtualService:
    enabled: true
    annotations:
  gateway:
    enabled: false
    annotations:
    selectorIstio: "ingressgateway"
    externalGatewayName: "swp-istio-gateway"
    tls:
      enabled: true
      httpsRedirect: true
      secretName: ""


## Docker image
image:
  registry: "registry.souvap-univention.de"
  repository: "souvap/tooling/images/univention-portal/notifications-api"
  imagePullPolicy: "Always"
  tag: "latest"

  ## Define image sha256 as an alternative to `tag`
  # sha256:


## Container deployment probes
probes:
  liveness:
    enabled: true
    initialDelaySeconds: 120
    timeoutSeconds: 3
    periodSeconds: 30
    failureThreshold: 3
    successThreshold: 1

  readiness:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 3
    periodSeconds: 15
    failureThreshold: 30
    successThreshold: 1


## Deployment resources
resources:
  requests:
    memory: "512Mi"
    cpu: "250m"
  limits:
    memory: "4Gi"
    cpu: "4"

## Kubernetes Service
service:
  enabled: true
  type: "ClusterIP"
  ports:
    http:
      containerPort: 8080
      port: 80
      protocol: "TCP"

  sessionAffinity:
    enabled: false
    timeoutSeconds: 10800


## PostgreSQL settings
#
# The bitnami helm chart does contain all details of what can be configured:
# https://github.com/bitnami/charts/tree/main/bitnami/postgresql
postgresql:
  bundled: true
  connection:
    host:
    port:
  auth:
    username: "notifications"
    database: "notifications"
    password: "easyPassword"
    postgresPassword: "postgres"

...
