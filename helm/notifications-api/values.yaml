---

# SPDX-FileCopyrightText: 2023-2024 Univention GmbH
# SPDX-License-Identifier: AGPL-3.0-only

# The global properties are used to configure multiple charts at once.
global:
  # -- Indicates wether this chart is part of a Nubus deployment.
  nubusDeployment: false

  # -- Credentials to fetch images from private registry.
  # Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  #
  # imagePullSecrets:
  #   - "docker-registry"
  imagePullSecrets: []

  # -- Define an ImagePullPolicy.
  #
  # Ref.: https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
  #
  # "IfNotPresent" => The image is pulled only if it is not already present locally.
  # "Always" => Every time the kubelet launches a container, the kubelet queries the container image registry to
  #             resolve the name to an image digest. If the kubelet has a container image with that exact digest cached
  #             locally, the kubelet uses its cached image; otherwise, the kubelet pulls the image with the resolved
  #             digest, and uses that image to launch the container.
  # "Never" => The kubelet does not try fetching the image. If the image is somehow already present locally, the
  #            kubelet attempts to start the container; otherwise, startup fails.
  imagePullPolicy: "IfNotPresent"

  configMapUcrDefaults: "stack-data-ums-ucr"
  configMapUcr: "stack-data-swp-ucr"
  configMapUcrForced: null

    # -- Configuration for the PostgreSQL database
  postgresql:
    connection:
      host: ""
      port: 5432

# -- Additional custom annotations to add to all deployed objects.
additionalAnnotations: {}

# -- Additional custom labels to add to all deployed objects.
additionalLabels: {}

# -- Affinity for pod assignment.
# Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
# Note: podAffinityPreset, podAntiAffinityPreset, and nodeAffinityPreset will be ignored when it's set.
affinity: {}

# Security Context.
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
containerSecurityContext:
  # -- Enable container privileged escalation.
  allowPrivilegeEscalation: false
  # -- Security capabilities for container.
  capabilities:
    drop:
      - "ALL"
  # -- Enable security context.
  enabled: true
  # -- Process user id.
  runAsUser: 1000
  # -- Process group id.
  runAsGroup: 1000
  # Set Seccomp profile.
  seccompProfile:
    # -- Disallow custom Seccomp profile by setting it to RuntimeDefault.
    type: "RuntimeDefault"
  # -- Mounts the container's root filesystem as read-only.
  readOnlyRootFilesystem: true
  # -- Run container as a user.
  runAsNonRoot: true

# -- Array with extra environment variables to add to containers.
#
# extraEnvVars:
#   - name: FOO
#     value: "bar"
extraEnvVars: []

# -- Optionally specify a secret to create (primarily intended to be used in development environments to provide custom certificates)
extraSecrets: []

# -- Optionally specify an extra list of additional volumes.
extraVolumes: []

# -- Optionally specify an extra list of additional volumeMounts.
extraVolumeMounts: []

# -- Provide a name to substitute for the full names of resources.
fullnameOverride: ""

image:
  registry: "artifacts.software-univention.de"
  repository: "nubus-dev/images/notifications-api"
  tag: "0.26.3@sha256:cb7d92c78ca63105ff990f16a4f3b61f5d124d8a5661f3f55545234877ff195e"
  imagePullPolicy: "IfNotPresent"

# -- Credentials to fetch images from private registry.
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
#
# imagePullSecrets:
#   - "docker-registry"
imagePullSecrets: []

# Define and create Kubernetes Ingress.
#
# Ref.: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  # -- Enable creation of Ingress.
  enabled: true

  # -- Define the Fully Qualified Domain Name (FQDN) where application should be reachable.
  host: ""

  # -- Define the Ingress paths.
  paths:
  - path: /(univention/portal/notifications-api/)(.*)
    pathType: ImplementationSpecific

  # -- The Ingress controller class name.
  ingressClassName: ""

  # -- Define custom ingress annotations.
  # annotations:
  #   nginx.ingress.kubernetes.io/rewrite-target: /
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/$2$3"
    nginx.ingress.kubernetes.io/use-regex: "true"

  # -- Secure an Ingress by specifying a Secret that contains a TLS private key and certificate.
  #
  # Ref.: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  tls:
    # -- Enable TLS/SSL/HTTPS for Ingress.
    enabled: true

    # -- The name of the kubernetes secret which contains a TLS private key and certificate.
    # Hint: This secret is not created by this chart and must be provided.
    secretName: ""

# -- Extra ingress configuration
extraIngresses: []
# example:
  # - name: custom
  #   host: ""
  #   paths:
  #     - pathType: Exact
  #       path: /custom
  #   ingressClassName: ""
  #   annotations: {}
  #   tls:
  #     enabled: true
  #     secretName: ""

# -- Lifecycle to automate configuration before or after startup.
lifecycleHooks: {}

#  Configure extra options for containers probes.
livenessProbe:
  # -- Number of failed executions until container is terminated.
  failureThreshold: 10
  # -- Delay after container start until LivenessProbe is executed.
  initialDelaySeconds: 15
  # -- Time between probe executions.
  periodSeconds: 20
  # -- Number of successful executions after failed ones until container is marked healthy.
  successThreshold: 1
  # -- Timeout for command return.
  timeoutSeconds: 5
  tcpSocket:
    # -- The port to connect to the container.
    port: 8080

# -- String to partially override release name.
nameOverride: ""

# -- Node labels for pod assignment.
# Ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

# Database persistence settings.
persistence:
  # -- The volume access modes, some of "ReadWriteOnce", "ReadOnlyMany", "ReadWriteMany", "ReadWriteOncePod".
  #
  # "ReadWriteOnce" => The volume can be mounted as read-write by a single node. ReadWriteOnce access mode still can
  #                    allow multiple pods to access the volume when the pods are running on the same node.
  # "ReadOnlyMany" => The volume can be mounted as read-only by many nodes.
  # "ReadWriteMany" => The volume can be mounted as read-write by many nodes.
  # "ReadWriteOncePod" => The volume can be mounted as read-write by a single Pod. Use ReadWriteOncePod access mode if
  #                       you want to ensure that only one pod across whole cluster can read that PVC or write to it.
  #
  accessModes:
    - "ReadWriteOnce"

  # -- Annotations for the PVC.
  annotations: {}

  # -- Custom PVC data source.
  dataSource: {}

  # -- Enable data persistence (true) or use temporary storage (false).
  enabled: true

  # -- Use an already existing claim.
  existingClaim: ""

  # -- Labels for the PVC.
  labels: {}

  # -- The volume size with unit.
  size: "10Gi"

  # -- The (storage) class of PV.
  storageClass: ""

  # -- Selector to match an existing Persistent Volume (this value is evaluated as a template).
  #
  # selector:
  #   matchLabels:
  #     app: my-app
  #
  selector: {}

# -- Pod Annotations.
# Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}

# -- Pod Labels.
# Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

# Pod Security Context.
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
podSecurityContext:
  # -- Enable security context.
  enabled: true

  # -- If specified, all processes of the container are also part of the supplementary group.
  fsGroup: 1000

  # -- Change ownership and permission of the volume before being exposed inside a Pod.
  fsGroupChangePolicy: "Always"

  # -- Configure sysctls for the pod
  # sysctls:
  #   - name: "net.ipv4.ip_unprivileged_port_start"
  #     value: "1"
  sysctls: []

#  Configure extra options for containers probes.
readinessProbe:
  # -- Number of failed executions until container is terminated.
  failureThreshold: 10
  # -- Delay after container start until LivenessProbe is executed.
  initialDelaySeconds: 15
  # -- Time between probe executions.
  periodSeconds: 20
  # -- Number of successful executions after failed ones until container is marked healthy.
  successThreshold: 1
  # -- Timeout for command return.
  timeoutSeconds: 5
  tcpSocket:
    port: 8080

# -- Set the amount of replicas of deployment.
replicaCount: 1

# Configure resource requests and limits.
#
# Ref: https://kubernetes.io/docs/user-guide/compute-resources/
resources: {}
  # limits:
  #   # -- The max number of RAM to consume.
  #   memory: "4Gi"
  # requests:
  #   # -- The number of CPUs which has to be available on the scheduled node.
  #   cpu: "250m"
  #   # -- The number of RAM which has to be available on the scheduled node.
  #   memory: "512Mi"

# Define and create Kubernetes Service.
#
# Ref.: https://kubernetes.io/docs/concepts/services-networking/service
service:
  # -- Additional custom annotations.
  annotations: {}
  # "ClusterIP" => Exposes the Service on a cluster-internal IP. Choosing this value makes the Service only reachable
  #                from within the cluster. This is the default that is used if you don't explicitly specify a type for
  #                a Service.
  # "NodePort" => Exposes the Service on each Node's IP at a static port (the NodePort). To make the node port
  #               available, Kubernetes sets up a cluster IP address, the same as if you had requested a Service of
  #               type: ClusterIP.
  # "LoadBalancer" => Exposes the Service externally using a cloud provider's load balancer.
  #
  # Ref.: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  # -- Choose the kind of Service, one of "ClusterIP", "NodePort" or "LoadBalancer".
  type: "ClusterIP"

  # Define the ports of Service.
  # You can set the port value to an arbitrary value, it will map the container port by name.
  #
  ports:
    http:
      # -- Accessible port.
      port: 80
      # -- Internal port.
      containerPort: 8080
      # -- service protocol.
      protocol: "TCP"

# Configure resource requests and limits.
#
# Ref: https://kubernetes.io/docs/user-guide/compute-resources/

# Service account to use.
# Ref.: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  ## @param serviceAccount.automountServiceAccountToken Allows auto mount of ServiceAccountToken on the serviceAccount created
  ## Can be set to false if pods using this serviceAccount do not need to use K8s API
  ##
  automountServiceAccountToken: false
  # -- Additional custom labels for the ServiceAccount.
  labels: {}

#  Configure extra options for containers probes.
startupProbe:
  # -- Delay after container start until StartupProbe is executed.
  initialDelaySeconds: 15
  # -- Number of failed executions until container is terminated.
  failureThreshold: 10
  # -- Time between probe executions.
  periodSeconds: 20
  # -- Number of successful executions after failed ones until container is marked healthy.
  successThreshold: 1
  # -- Timeout for command return.
  timeoutSeconds: 5
  tcpSocket:
    # -- The port to connect to the container.
    port: 8080

# -- In seconds, time the given to the pod needs to terminate gracefully.
# Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
terminationGracePeriodSeconds: ""

# -- Tolerations for pod assignment.
# Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

# -- Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in.
# Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
#
# topologySpreadConstraints:
#   - maxSkew: 1
#     topologyKey: failure-domain.beta.kubernetes.io/zone
#     whenUnsatisfiable: DoNotSchedule
topologySpreadConstraints: []

# Set up update strategy.
#
# Ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
#
# Example:
# updateStrategy:
#  type: RollingUpdate
#  rollingUpdate:
#    maxSurge: 25%
#    maxUnavailable: 25%
updateStrategy:
  # -- Set to Recreate if you use persistent volume that cannot be mounted by more than one pods to make sure the pods
  # are destroyed first.
  type: "RollingUpdate"

# -- Application configuration of the Notifcations API
notificationsApi:
  # -- Apply database migrations automatically
  applyDatabaseMigrations: "True"
  # -- Activate the development mode. Do not use this in production deployments.
  devMode: "False"
  # -- TODO: Clarify usage of this parameter
  environment: "production"
  # -- Log level configuration. E.g. "DEBUG", "INFO", "WARNING", "ERROR".
  logLevel: "WARNING"
  # -- SQL command logging, e.g. "True" or "False"
  sqlEcho: "False"
  # -- The URL prefix under which the API shall be deployed.
  apiPrefix: "/univention/portal/notifications-api/"

# -- PostgreSQL settings.
#
# The bitnami helm chart does contain all details of what can be configured:
# https://github.com/bitnami/charts/tree/main/bitnami/postgresql
postgresql:
  # -- Set to `true` if you want PostgreSQL to be installed as well.
  bundled: false
  # -- Connection parameters. These are required if an external service should be used (bundled is set to `false`).
  connection:
    # -- PostgreSQL host.
    host: ""
    # -- PostgreSQL port.
    port: "5432"
  auth:
    # -- PostgreSQL user. If bundled is set to `true` this user will be created.
    username: ""
    # -- PostgreSQL database. If bundled is set to `true` this database will be created.
    database: ""
    # -- PostgreSQL user password if bundled is set to `true`.
    password: ""
    # -- PostgreSQL admin password if bundled is set to `true`.
    postgresPassword: ""
    # -- PostgreSQL existing secret to use if bundled is set to `true`.
    existingSecret: ""
    # -- PostgreSQL existing secret keys to use if bundled is set to `true`.
    secretKeys:
      adminPasswordKey: postgres-password
      userPasswordKey: password
      replicationPasswordKey: replication-password
    # -- PostgreSQL password secret reference.
    credentialSecret:
      name: ""
      key: "password"
...
