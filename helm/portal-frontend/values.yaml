---
# Default values for univention-portal-frontend.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## Global values
affinity: {}
environment: {}
fullnameOverride: ""
nameOverride: ""
nodeSelector: {}
podAnnotations: {}
podSecurityContext: {}
replicaCount: 1
securityContext: {}
tolerations: []


# -- Application configuration of the Portal Frontend
portalFrontend:
  # -- TODO: Clarify usage of this parameter
  environment: "production"
  # -- TODO: Clarify usage of this parameter
  logLevel: "WARNING"

## Kubernetes ingress
ingress:
  # -- Set this to `true` in order to enable the installation on Ingress related objects.
  enabled: true
  ingressClassName: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite ^/univention/portal(/.*)$ $1 break;
    nginx.org/location-snippets: |
      rewrite ^/univention/portal(/.*)$ $1 break;
    nginx.org/mergeable-ingress-type: "minion"
  # -- The hostname. This parameter has to be supplied. Example `portal.example`.
  host: null
  # -- The path configuration. The default only grabs what is known to be part of the frontend.
  paths:
    - pathType: Exact
      path: /univention/portal/
    - pathType: Exact
      path: /univention/portal/index.html

    - pathType: Prefix
      path: /univention/portal/css/
    - pathType: Prefix
      path: /univention/portal/fonts/
    - pathType: Prefix
      path: /univention/portal/i18n/
    - pathType: Prefix
      path: /univention/portal/media/
    - pathType: Prefix
      path: /univention/portal/js/
    - pathType: Prefix
      path: /univention/portal/oidc/
  tls:
    enabled: true
    secretName: ""

extraIngresses:
  # -- Redirects "/" and "/univention/" to "/univention/portal/".
  redirects:
    enabled: true
    # -- By default uses the value of "ingress.ingressClassName".
    ingressClassName: null
    annotations:
      nginx.ingress.kubernetes.io/configuration-snippet: |
        return 302 /univention/portal/;
      nginx.org/location-snippets: |
        return 302 /univention/portal/;
      nginx.org/mergeable-ingress-type: "minion"
    # -- By default uses the value of "ingress.host".
    host: null
    paths:
      - pathType: Exact
        path: /
      - pathType: Exact
        path: /univention
      - pathType: Exact
        path: /univention/
      - pathType: Exact
        path: /univention/portal
    tls:
      # -- By default uses the value of "ingress.tls.enabled"
      enabled: null
      # -- By default uses the value of "ingress.tls.secretName"
      secretName: ""

  # -- Needed when using nginx-ingress as ingress controller. Enable by setting
  # the "enabled" attribute to "true". Be aware that you also have to switch off
  # "tls" in all ingress objects of type "minion".
  #
  # See: https://github.com/nginxinc/kubernetes-ingress/tree/v3.2.1/examples/ingress-resources/mergeable-ingress-types
  master:
    enabled: false
    annotations:
      nginx.org/mergeable-ingress-type: "master"
    # -- By default uses the value of "ingress.host".
    host: null
    # -- By default uses the value of "ingress.ingressClassName".
    ingressClassName: null
    tls:
      # -- TLS is configured by default if the "master" ingress is enabled.
      enabled: true
      # -- By default uses the value of "ingress.tls.secretName"
      secretName: ""


## Istio support
istio:
  # -- Set this to `true` in order to enable the installation on Istio related objects.
  enabled: false
  # -- The hostname. This parameter has to be supplied. Example `portal.example`.
  host: null
  virtualService:
    enabled: true
    annotations: {}
    # Example to "inject" a different "custom.css" file:
    #
    # pathOverrides:
    #   - match: "exact"
    #     path: "/univention/portal/css/custom.css"
    #     route:
    #       - destination:
    #           port:
    #             number: 80
    #           host: "example-service"
    #
    # -- Allows to inject deployment specific path configuration which is configured before
    # the elements from `paths` below. This allows to redirect some paths to other services,
    # e.g. in order to supply a file `custom.css`.
    pathOverrides: []
    # -- The paths configuration. The default only grabs what is known to be
    # part of the frontend.
    #
    # TODO: Istio does currently not support a URL rewrite which uses regular
    # expressions, basically the capture groups are not yet supported. It also
    # does not support an automatic sorting of rules based on the prefix
    # length like the nginx ingress does. Interim we mention explicitly every
    # prefix which is exclusively part of the frontend in this configuration.
    # This way all other subpaths in "/univention/portal/" can still be
    # reliably grabbed by other services if they are present.
    #
    # `pathOverrides` is provided as a workaround so that specific sub-paths can
    # be redirected to other services.
    paths:
      - match: "prefix"
        path: "/univention/portal/css/"
        rewrite: "/css/"
      - match: "prefix"
        path: "/univention/portal/fonts/"
        rewrite: "/fonts/"
      - match: "prefix"
        path: "/univention/portal/i18n/"
        rewrite: "/i18n/"
      - match: "exact"
        path: "/univention/portal/"
        rewrite: "/"
      - match: "exact"
        path: "/univention/portal/index.html"
        rewrite: "/index.html"
      - match: "prefix"
        path: "/univention/portal/media/"
        rewrite: "/media/"
      - match: "prefix"
        path: "/univention/portal/js/"
        rewrite: "/js/"
      - match: "prefix"
        path: "/univention/portal/oidc/"
        rewrite: "/oidc/"
  gateway:
    enabled: false
    annotations:
    selectorIstio: "ingressgateway"
    externalGatewayName: "swp-istio-gateway"
    tls:
      enabled: true
      httpsRedirect: true
      secretName: ""


## Docker image
image:
  registry: "registry.souvap-univention.de"
  repository: "souvap/tooling/images/univention-portal/portal-frontend"
  imagePullPolicy: "Always"
  tag: "latest"

  ## Define image sha256 as an alternative to `tag`
  # sha256:


## Container deployment probes
probes:
  liveness:
    enabled: true
    initialDelaySeconds: 120
    timeoutSeconds: 3
    periodSeconds: 30
    failureThreshold: 3
    successThreshold: 1

  readiness:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 3
    periodSeconds: 15
    failureThreshold: 30
    successThreshold: 1


## Deployment resources
resources:
  requests:
    memory: "512Mi"
    cpu: "250m"
  limits:
    memory: "4Gi"
    cpu: "4"

## Kubernetes Service
service:
  enabled: true
  type: "ClusterIP"
  ports:
    http:
      containerPort: 80
      port: 80
      protocol: "TCP"

  sessionAffinity:
    enabled: false
    timeoutSeconds: 10800

...
