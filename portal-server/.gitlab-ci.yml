---

# SPDX-FileCopyrightText: 2023-2024 Univention GmbH
# SPDX-License-Identifier: AGPL-3.0-only

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "parent_pipeline"'

include:
  - project: "univention/customers/dataport/upx/common-ci"
    ref: "v1.31.1"
    file:
      - "defaults/stages.yaml"
      - "templates/kaniko.yaml"
      - "jobs/container-build-external.yaml"
      - "jobs/package-and-publish-helm-charts-external.yaml"

generate-joinscript-data:
  stage: "prepare"
  image: "gitregistry.knut.univention.de/univention/customers/dataport/upx/stack-data/joinscript-tools:latest"
  needs: []
  script:
    - |
      ucr set \
        ldap/base="{{ ldap_base }}" \
        server/role="domaincontroller_master"
      # Ensure that the icons can be found by the calls to base64
      ln -s "$PWD" "/usr/share/univention-portal"
      mkdir --parents $(dirname ${OUT_FILENAME})
      ./33univention-portal.inst || true
  variables:
    OUT_FILENAME: "udm/join-data/univention-portal.yaml.j2"
  artifacts:
    paths:
      - "udm/join-data"

.build-matrix: &build-matrix
  - IMAGE_NAME: "portal-server-test-runner"
    DOCKERFILE_PATH: "docker/portal-server/Dockerfile"
    KANIKO_ARGS: "--target=test"
  - IMAGE_NAME: "portal-server"
  - IMAGE_NAME: "portal-udm-extensions"

.post-build-matrix: &post-build-matrix
  - IMAGE_NAME:
      - "portal-server-test-runner"
      - "portal-server"
      - "portal-udm-extensions"
      - "portal-listener"

.publish-matrix: &publish-matrix
  - IMAGE_NAME:
      - "portal-server"
      - "portal-listener"

container-build:
  parallel:
    matrix: *build-matrix
  variables:
    KANIKO_BUILD_CONTEXT: "$CI_PROJECT_DIR"
    DOCKERFILE_PATH: "docker/${IMAGE_NAME}/Dockerfile"

# depends on portal-server
container-build-portal-listener:
  stage: "build"
  extends: ".kaniko"
  needs:
    - job: "container-build"
      artifacts: false
  variables:
    IMAGE_NAME: "portal-listener"
    DOCKERFILE_PATH: "docker/portal-listener/Dockerfile"
    KANIKO_BUILD_CONTEXT: "$CI_PROJECT_DIR"
    KANIKO_ARGS: "--build-arg PORTAL_BASE_IMAGE_TAG=${RELEASE_VERSION}"

container-generate-sbom:
  needs:
    - job: "container-build"
      artifacts: true
    - job: "container-build-portal-listener"
      artifacts: true
  parallel:
    matrix: *post-build-matrix

test-portal-server:
  stage: "test"
  # needs:
  #   - job: build-portal-server-test-runner
  image: "$CI_REGISTRY_IMAGE/portal-server-test-runner:${RELEASE_VERSION}"
  variables:
    PYTHONPATH: "./python:/usr/lib/python3/dist-packages"
  script:
    - |
      pytest --cov=python/univention/portal --cov-report=term --cov-report=xml:coverage.xml unittests
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: "cobertura"
        path: "coverage.xml"

push-image-external:
  before_script:
    - |
      set -eux
      export EXTERNAL_REGISTRY_ROBOT_ACCOUNT='robot$nubus-push-from-gitlab'
      echo /bin/skopeo login \
          --username "${EXTERNAL_REGISTRY_ROBOT_ACCOUNT}" \
          --password-stdin "${EXTERNAL_REGISTRY_HOST}" \
          --authfile "${HOME}/external-auth.json"
  parallel:
    matrix: *publish-matrix

container-sign-external:
  parallel:
    matrix: *publish-matrix

package-helm-charts:
  parallel:
    matrix: *publish-matrix

...
