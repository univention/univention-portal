OOOOBOOOBOOBOBOOOBBOOOOO<!--
  Copyright 2021 UniventBOBOBion GmbH
OOO
  hOOBOBOOttps://www.univention.de/
OBOOOOOBOOB
  All rightOOOBOBOOOOOOs reserved.
OOOOOOOOA
  TheOBOO source cOode of this program is made available
  under tBOBOBOOOOhe terms of the GNU Affero General Public License version 3
  (GNU AGPL V3) as published by the Free Software Foundation.

  Binary versions of this program provided by Univention to you as
  well as other copyrighted, protected or trademarked materials like
  Logos, graphics, fonts, specific documentations and configurations,
  cryptographic keys etc. are subject to a license agreement between
  you and Univention and not subject to the GNU AGPL V3.

  In the case you use this program under the terms of the GNU AGPL V3,
  the program is provided in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public
  License with the Debian GNU/Linux or Univention distribution in file
  /usr/share/common-licenses/AGPL-3; if not, see
  <https://www.gnu.org/licenses/>.
-->
<template>
  <div
    ref="modal"
    class="modal-admin__wrapper"
    role="dialog"
    aria-labelledby="TO_BE_SET"
    draggable="true"
  >
    <div
      :class="{ 'modal-admin__title-bar--draggable' : isMoveable }"
      class="modal-admin__title-bar"
      role="heading"
      level="1"
    >
      <span
        class="modal-admin__title"
        @mousedown="moveModal()"
      >
        <template
          v-if="!getInnerModal"
        >
          <translate :i18n-key="modalTitle" />
        </template>

        <template
          v-else
        >
          <translate :i18n-key="modalInnerTitle" />
        </template>
      </span>

      <span
        v-if="showTitleButton"
        class="modal-admin__top-button--inner"
        role="presentation"
        @click.prevent="resetModal('closeModal')"
      >
        <button
          ref="modal-title-button"
          aria-expanded="true"
          aria-label="Close modal"
          class="modal-admin__top-button"
        >
          <portal-icon
            icon="x"
          />
        </button>
      </span>
    </div>

    <form>
      <div class="modal-admin__content">
        <template v-if="getCurrentModal === 'editCategory'">
          <form-category-edit
            v-model="getModalContent"
          />
          <pre v-if="modalDebugging">
            de: {{ getModalContent.title.de_DE }}
            en: {{ getModalContent.title.en_US }}
          </pre>
        </template>

        <template v-if="getCurrentModal === 'addNewCategory'">
          <form-category-add-new
            v-model="getModalContent"
          />
          <pre v-if="modalDebugging">
            dn: {{ getModalContent.internalName }}
            de: {{ getModalContent.title.de_DE }}
            en: {{ getModalContent.title.en_US }}
          </pre>
        </template>

        <template v-if="getCurrentModal === 'addExistingCategory'">
          <form-category-add-existing
            v-model="getModalContent"
            :category-listing="categorieDn"
          />
          <pre v-if="modalDebugging">
            dn: {{ getModalContent.internalName }}
          </pre>
        </template>

        <template v-if="getCurrentModal === 'editEntry'">
          <!-- <form-entry-edit
            v-model="entryForm"
            :step="getEntryStep"
          /> -->
          <form-entry-edit
            v-model="getModalContent"
            :step="getEntryStep"
          />
          <pre v-if="modalDebugging">
            <hr>
            id: {{ getModalContent.id }}
            de: {{ getModalContent.title.de_DE }}
            en: {{ getModalContent.title.en_US }}
            allowedGroups: {{ getModalContent.allowedGroups }}
          </pre>
        </template>

        <template v-if="getCurrentModal === 'createEntry'">
          <form-entry-edit
            v-model="getModalContent"
            :step="getEntryStep"
          />
          <pre v-if="modalDebugging">
            <hr>
            id: {{ getModalContent.id }}
            de: {{ getModalContent.title.de_DE }}
            en: {{ getModalContent.title.en_US }}
            allowedGroups: {{ getModalContent.allowedGroups }}
          </pre>
        </template>
      </div>

      <template v-if="!getInnerModal">
        <div class="modal-admin__footer">
          <span class="modal-admin__button">
            <button
              class="modal-admin__button--inner"
              @click.prevent="resetModal('closeModal')"
            >
              <translate i18n-key="CANCEL" />
            </button>
          </span>

          <span
            v-if="removeAction && (getEntryStep === 0)"
            class="modal-admin__button"
          >
            <button
              class="modal-admin__button--inner"
              @click.prevent="resetModal(removeAction)"
            >
              <template v-if="modalPagination">
                <translate i18n-key="REMOVE" />
              </template>
              <template v-else>
                <translate i18n-key="REMOVE_FROM_PORTAL" />
              </template>
            </button>
          </span>

          <span
            v-if="modalPagination && (getEntryStep > 0)"
            class="modal-admin__button"
          >
            <button
              class="modal-admin__button--inner"
              @click.prevent="navigate('back', getEntryStep)"
            >
              <translate i18n-key="BACK" />
            </button>
          </span>

          <span
            v-if="modalPagination && (getEntryStep < maxStep)"
            class="modal-admin__button"
          >
            <button
              class="modal-admin__button--inner"
              @click.prevent="navigate('next', getEntryStep)"
            >
              <translate i18n-key="NEXT" />
            </button>
          </span>

          <span class="modal-admin__button">
            <button
              class="modal-admin__button--inner"
              @click.prevent="resetModal(saveAction)"
            >
              <translate i18n-key="SAVE" />
            </button>
          </span>
        </div>
      </template>
    </form>
  </div>
</template>

<script>
import { defineComponent, ref, reactive, computed, onMounted, onUnmounted } from 'vue';
import { useStore } from 'vuex';

import PortalIcon from '@/components/globals/PortalIcon.vue';

// Forms
import FormCategoryEdit from '@/components/admin/forms/FormCategoryEdit.vue';
import FormCategoryAddNew from '@/components/admin/forms/FormCategoryAddNew.vue';
import FormCategoryAddExisting from '@/components/admin/forms/FormCategoryAddExisting.vue';
import FormEntryEdit from '@/components/admin/forms/FormEntryEdit.vue';

import Translate from '@/i18n/Translate.vue';

import moveContent from '@/jsHelper/moveContent';

export default defineComponent({
  name: 'ModalEditCategory',
  components: {
    PortalIcon,
    FormCategoryEdit,
    FormCategoryAddNew,
    FormCategoryAddExisting,
    FormEntryEdit,
    Translate,
  },
  props: {
    modalTitle: {
      type: String,
      required: true,
    },
    showTitleButton: {
      type: Boolean,
      default: true,
    },
    removeAction: {
      type: String,
      default: null,
    },
    saveAction: {
      type: String,
      required: true,
    },
    title: {
      type: Object,
      required: true,
    },
    categoryIndex: {
      type: Number,
      default: 0,
    },
    itemIndex: {
      type: Number,
      default: 0,
    },
    modalDebugging: {
      type: Boolean,
      default: false,
    },
    modalContent: {
      type: Object,
      default: () => ({}),
    },
  },
  emits: [
    'closeModal',
    'removeCategory',
    'saveCategory',
    'saveEntry',
  ],
  setup(props, { emit }) {
    // vuex example: https://github.com/vuejs/vuex/blob/4.0/examples/composition/shopping-cart/components/ShoppingCart.vue

    // store
    const store = useStore();

    const getCurrentModal = computed(() => store.getters['admin/getCurrentModal']);
    const modalPagination = computed(() => store.getters['admin/getShowModalPagination']);
    const getModalVariant = computed(() => store.getters['admin/getModalVariant']);

    console.log('getCurrentModal: ', getCurrentModal.value);
    console.log('modalPagination: ', modalPagination.value);
    console.log('getModalVariant: ', getModalVariant.value);

    // data
    const modal = ref(null);
    const isMoveable = true;
    const showHint = ref(false);
    const categorieDn = [];
    let getEntryStep = ref(0);
    let maxStep = 0;
    let getInnerModal = ref(false);
    let modalInnerTitle = '';
    let getModalContent = {};

    // category mode
    let categoryTitleDe = '';
    let categoryTitleEn = '';
    let categoryInternalNameValue = '';
    let getPortalCategories = '';

    // v-model
    const categoryForm = reactive({
      key: {
        de_DE: 'de_DE',
        en_US: 'en_US',
      },
      title: {
        de_DE: categoryTitleDe,
        en_US: categoryTitleEn,
      },
      internalName: categoryInternalNameValue,
    });
    // console.log('categoryForm: ', categoryForm);

    // get catgorie data
    if ((getCurrentModal.value === 'editCategory') || (getCurrentModal.value === 'addExistingCategory')) {
      // TODO: keys have to be provided in the portal.json in parallel to the title

      // v-model
      getModalContent = categoryForm;
      console.log('getModalContent: ', getModalContent);

      getPortalCategories = computed(() => store.getters['portalData/portalCategories']);
    }

    // category edit mode
    if ((getCurrentModal.value === 'editCategory') && getPortalCategories) {
      const categoryTitle = getPortalCategories.value[props.categoryIndex];
      categoryTitleDe = categoryTitle.display_name.de_DE;
      categoryTitleEn = categoryTitle.display_name.en_US;

      // v-model
      getModalContent = categoryForm;
      console.log('getModalContent: ', getModalContent);

      const dn = getPortalCategories.value[props.categoryIndex].dn;
      categoryInternalNameValue = dn.substring(
        dn.indexOf('cn=') + 3,
        dn.indexOf(','),
      );
    }

    // category existing mode
    if ((getCurrentModal.value === 'addExistingCategory') && (getPortalCategories && getPortalCategories.value.length > 0)) {
      getPortalCategories.value.forEach((category) => {
        categorieDn.push(category.dn.substring(
          category.dn.indexOf('cn=') + 3,
          category.dn.indexOf(','),
        ));
      });

      // v-model
      getModalContent = categoryForm;
      console.log('getModalContent: ', getModalContent);
    }

    // entry edit mode
    if ((getCurrentModal.value === 'editEntry') || (getCurrentModal.value === 'createEntry')) {
      maxStep = 4;
      getEntryStep = computed(() => store.getters['admin/getEntryStep']);
      console.log('getEntryStep: ', getEntryStep);

      getInnerModal = computed(() => store.getters['admin/getInnerModal']);
      console.log('getInnerModal: ', getInnerModal);

      // v-model
      getModalContent = computed(() => store.getters['admin/getTileObject']);
      console.log('getModalContent: ', getModalContent);

      store.dispatch('admin/setShowModalPagination', true);

      modalInnerTitle = 'ADD_OBJECTS';
    }

    // methods
    const moveModal = () => {
      if (isMoveable) {
        moveContent(modal);
      }
    };

    const resetModal = (action) => {
      modal.value.style.top = '0';
      modal.value.style.left = '0';

      // reset steps
      store.dispatch('admin/setEntryStep', 0);

      if (action) {
        if (action === 'saveCategory') {
          emit('saveCategory', categoryForm);
        } else if (action === 'saveEntry') {
          console.log('saveEntry');
          // emit('saveEntry', entryForm);
        } else {
          if (getCurrentModal.value === 'editEntry') {
            console.log('editEntry');

            // const entryFormOriginal = localStorage.getItem('tile');
            // console.log('entryForm: ', entryForm);
            // console.log('entryFormOriginal: ', entryFormOriginal);
            // // props.modalContent = JSON.parse(entryFormOriginal);
            // emit('saveEntry', JSON.parse(entryFormOriginal));
          }
          emit(action);
        }
      }
    };

    const navigate = (direction, currentStep) => {
      // console.log('navigate: ', direction, currentStep);
      console.log('direction: ', direction);
      let setStep = 0;

      if ((direction === 'next') && (currentStep <= maxStep)) {
        // increase step
        setStep = currentStep + 1;
      }

      if ((direction === 'back') && (currentStep > 0)) {
        // decrease step
        setStep = currentStep - 1;
      }

      console.log('setStep: ', setStep);

      store.dispatch('admin/setEntryStep', setStep);
    };

    // mounted
    onMounted(() => {
      localStorage.setItem('tile', JSON.stringify(props.modalContent));
    });

    onUnmounted(() => {
      localStorage.removeItem('tile');
    });

    return {
      modal,
      isMoveable,
      showHint,
      getPortalCategories,
      categorieDn,
      getEntryStep,
      // categoryForm,
      // entryForm,
      moveModal,
      resetModal,
      navigate,
      maxStep,
      getInnerModal,
      modalPagination,
      modalInnerTitle,
      getCurrentModal,
      getModalContent,
    };
  },
});
</script>

<style lang="stylus">
.modal-admin
  &__wrapper
    background: var(--color-grey0)
    border-radius: var(--border-radius-container)
    min-width: 650px
    max-width: 650px
    box-shadow: var(--box-shadow)
    position: relative
    z-index: $zindex-5

  &__title-bar
    font-weight: bold
    padding: 2em 2em 1em 2em
    display: flex
    align-items: center

    &--draggable
      cursor: move

  &__title
    flex: 1 0 auto
    font-size: var(--font-size-1)

  &__top-button
    width: 4rem
    height: 4rem
    background: none
    border: none
    color: white
    display: flex
    align-items: center
    justify-content: center
    background-color: transparent

    &:hover,
    &:focus
      border-radius: 100%
      background-color: var(--bgc-content-body)
      cursor: pointer

    &--inner
      margin-left: 1em
      cursor: pointer
      border: none
      border-radius: inherit
      display: flex
      align-items: center
      justify-content: center
      transition: var(--button-bgc-transition)
      background-color: var(--bgc-state)
      transition: opacity 250ms
      font-size: var(--button-font-size)

  &__content
    padding: 0 calc(var(--layout-spacing-unit) * 4)
  &__footer
    background-color: var(--color-grey0)
    display: flex
    justify-content: space-between
    border-top: thin solid var(--color-grey8)
    padding: var(--layout-spacing-unit) calc(var(--layout-spacing-unit) * 3)
    flex-wrap: wrap

  &__hint
    position: absolute
    z-index: $zindex-6
    display: block
    overflow: visible
    margin-top: calc(var(--layout-spacing-unit) * -1)
    right: calc(var(--layout-spacing-unit) * 9)

  &__hint-icon
    margin-left: var(--layout-spacing-unit)
    color: var(--color-grey62)
    width: 1.6rem
    &:hover
      cursor: pointer

  &__hint-connector
    position: absolute

  &__hint-content
    max-width: 400px
    color: var(--color-grey8)
    border-radius: var(--border-radius-tooltip)
    border: none
    padding: 0.6em 0.9em
    background: rgba(255,255,255,0.6)
    backdrop-filter: blur(20px)

  &__button
    &:first-of-type
      margin-left: calc(var(--layout-spacing-unit) * 2)
    &:last-of-type
      margin-right: calc(var(--layout-spacing-unit) * 2)

  &__label
    &--error
      color: var(--color-error);

.form-input

  &__wrapper
    width: 100%
    min-width: 300px
    max-width: 650px
    padding: 0 0 1rem 0
    display: inline-block

  &__container
    width: 95%

  &__label
    color: var(--font-color-disabled)

  &--error
    border: 1px solid var(--color-error) !important

  &--default
    width: 100%

  &--text
    text-overflow: ellipsis

  &--checkbox
    cursor: pointer
    border: 1px solid var(--color-primary)
    width: calc(var(--inputfield-width) / 16)
    height: @width
    margin-right: var(--layout-spacing-unit)

  &__icon
    position: relative
    top: 40px
    left: 55%

    &--error
      display: none
      color: var(--color-error);
      position: relative
      top: 50px
      left: 78%

  &__error-message
    position: relative
    top: calc(var(--layout-spacing-unit) * 2)
    color: var(--color-error);

  &__error-info
    position: relative
    color: var(--color-error);
</style>
